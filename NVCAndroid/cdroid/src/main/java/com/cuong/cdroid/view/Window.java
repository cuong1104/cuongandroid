package com.cuong.cdroid.view;import android.app.Activity;import android.content.Context;import android.graphics.PixelFormat;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.WindowManager;/** * Created by unmer_000 on 26/06/2015. * Contact: vcuong11s@gmail.com or unme.rf@gmail.com */public class Window {    private WindowParams params;    public static class WindowParams {        public Activity activity;        public Context context;        public boolean isShowing = false;        public WindowManager windowManager;        public WindowManager.LayoutParams wParams;        public View layout;        public View vClose;        public View vContent;        public int idClose;        public int idContent;        public boolean cancelable = false;        public OnWindowDismissListener onWindowDismissListener;        public WindowParams(Context context) {            this.context = context;        }        public WindowParams(Activity activity) {            this.activity = activity;        }    }    public static class Builder {        private final WindowParams P;        public Builder(Context context) {            P = new WindowParams(context);        }        public Builder(Activity context) {            P = new WindowParams(context);        }        public Builder customView(View view) {            P.layout = view;            if (P.layout == null) {                throw new RuntimeException("Error, custom view is null");            }            return this;        }        public Builder customView(int id) {            P.layout = LayoutInflater.from(P.context).inflate(id, null, false);            if (P.layout == null) {                throw new RuntimeException("Cannot find custom view with id " + id);            }            return this;        }        public Builder contentView(View view) {            P.vContent = view;            return this;        }        public Builder contentView(int idContent) {            P.idContent = idContent;            if (P.layout != null && idContent != 0) {                P.vContent = P.layout.findViewById(idContent);            }            return this;        }        public Builder closeView(int idClose) {            P.idClose = idClose;            if (P.layout != null && idClose != 0) {                P.vClose = P.layout.findViewById(idClose);            }            return this;        }        public Builder closeView(View view) {            P.vClose = view;            return this;        }        public Builder onClose(OnWindowDismissListener onClose) {            P.onWindowDismissListener = onClose;            return this;        }        public Builder cancelable(boolean flag) {            P.cancelable = flag;            return this;        }        public Window build() {            return new Window(P);        }    }    public void setCancelable(boolean flag) {        params.cancelable = flag;    }    public Window(WindowParams params) {        this.params = params;        if (params.activity != null) {            params.windowManager = (WindowManager) params.activity.getSystemService(Activity.WINDOW_SERVICE);        } else if (params.context != null) {            params.windowManager = (WindowManager) params.context.getSystemService(Context.WINDOW_SERVICE);        } else {            throw new RuntimeException("You need create Window with a Context or Activity");        }        if (Window.this.params.layout != null) {            Window.this.params.layout.setClickable(true);        } else {            throw new RuntimeException("WindowLayout is null");        }        Window.this.params.wParams = new WindowManager.LayoutParams(                WindowManager.LayoutParams.MATCH_PARENT,                WindowManager.LayoutParams.MATCH_PARENT,                WindowManager.LayoutParams.TYPE_PHONE,                WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON,                PixelFormat.TRANSPARENT);        Window.this.params.wParams.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;        Window.this.params.wParams.gravity = Gravity.CENTER;        Window.this.params.wParams.x = 0;        Window.this.params.wParams.y = 0;        if (Window.this.params.vClose != null) {            Window.this.params.vClose.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dismiss();                    Window.this.params.isShowing = false;                }            });        } else {            Log.d("Window", "Close view is null, window maybe cannot close");        }        if (Window.this.params.vContent != null) {            Window.this.params.vContent.setOnClickListener(null);        }        Window.this.params.layout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (Window.this.params.cancelable) {                    dismiss();                }            }        });    }    /**     * After window has been init, we can show window by this function     */    public void show() {        if (params.windowManager != null && params.wParams != null && params.layout != null) {            params.isShowing = true;            params.windowManager.addView(params.layout, params.wParams);        } else if (params.windowManager == null) {            throw new RuntimeException("WindowManager is null");        } else if (params.wParams == null) {            throw new RuntimeException("WindowParams is null");        } else {            throw new RuntimeException("WindowLayout is null");        }    }    public void setOnWindowDismissListener(OnWindowDismissListener onDismiss) {        params.onWindowDismissListener = onDismiss;    }    public void dismiss() {        if (params.windowManager != null & params.layout != null && params.isShowing) {            try {                params.windowManager.removeView(params.layout);            } catch (Exception e) {                e.printStackTrace();            }            params.isShowing = false;        } else {            Log.d("Window", "Dialog cannot dismiss, please check and sure it showing");        }        if (params.onWindowDismissListener != null) {            params.onWindowDismissListener.onDismiss();        }    }    public boolean isShowing() {        return params.isShowing;    }    public Context getContext() {        return params.context;    }    public interface OnWindowDismissListener {        void onDismiss();    }}