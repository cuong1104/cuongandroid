package com.cuong.android.view;import android.app.Activity;import android.content.Context;import android.graphics.PixelFormat;import android.os.Handler;import android.util.Log;import android.view.Gravity;import android.view.View;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import com.cuong.android.R;/** * Created by unmer_000 on 26/06/2015. * Open Source: This source has been wrote by CuongNguyen * Contact: vcuong11s@gmail.com or unme.rf@gmail.com */public class CustomDialog {    /**     * Context     */    private Activity activity;    private Context context;    /**     * View and layout     */    protected View layoutDialog;    private int idClose;    private int idContent;    /**     * Manager     */    private WindowManager windowManager;    private WindowManager.LayoutParams params;    // when use tap out site layout, dialog will be dismiss    private boolean cancelable = true;    private boolean isShowing = false;    /**     * Listener     */    private OnDialogShow onDialogShow;    private OnDialogCancel onDialogCancel;    private OnDialogDismiss onDialogDismiss;    private boolean animationEnable = true;    public CustomDialog(Activity activity) {        this.activity = activity;    }    public CustomDialog(Context context) {        this.context = context;    }    public void setOnDialogShow(OnDialogShow onDialogShow) {        this.onDialogShow = onDialogShow;    }    public void setOnDialogCancel(OnDialogCancel onDialogCancel) {        this.onDialogCancel = onDialogCancel;    }    public void setOnDialogDismiss(OnDialogDismiss onDialogDismiss) {        this.onDialogDismiss = onDialogDismiss;    }    public boolean isCancelable() {        return cancelable;    }    public void setCancelable(boolean cancelable) {        this.cancelable = cancelable;    }    /**     * @layoutDialog This is a view to show dialog, should be fullscreen     * @idClose every dialog view should be have a View to close dialog     */    public void showPopup(final View layoutDialog, final int idClose, final int idContent) {        this.layoutDialog = layoutDialog;        this.idClose = idClose;        this.idContent = idContent;        initDialog();        show();    }    /**     * Init dialog but not show     */    public void initDialog(final View layoutDialog, final int idClose, final int idContent) {        this.layoutDialog = layoutDialog;        this.idClose = idClose;        this.idContent = idContent;        initDialog();        this.context = layoutDialog.getContext();    }    /**     * Init dialog but not show     */    public void initDialog(final View layoutDialog, final int idClose) {        this.layoutDialog = layoutDialog;        this.idClose = idClose;        initDialog();        this.context = layoutDialog.getContext();    }    public void setAnimationEnable(boolean enable) {        this.animationEnable = enable;    }    /**     * Init dialog and show it     */    private void initDialog() {        /**         * We cannot init dialog when it showing         */        if (!isShowing) {            isShowing = true;            if (activity != null) {                windowManager = (WindowManager) activity.getSystemService(activity.WINDOW_SERVICE);            } else if (context != null) {                windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);            } else {                Log.e("CustomDialog", "You need create custom dialog with a Context or Activity");                return;            }            params = new WindowManager.LayoutParams(                    WindowManager.LayoutParams.MATCH_PARENT,                    WindowManager.LayoutParams.MATCH_PARENT,                    WindowManager.LayoutParams.TYPE_PHONE,                    WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON,                    PixelFormat.TRANSPARENT);            params.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;            params.gravity = Gravity.CENTER;            params.x = 0;            params.y = 0;            setupOnCancel(idClose);        } else {            Log.e("CustomDialog", "Cannot Init Dialog When It is Showing");        }    }    /**     * After dialog has been init, we can show dialog by this function     */    public void show() {        if (windowManager != null && params != null && layoutDialog != null) {            layoutDialog.setClickable(true);            windowManager.addView(layoutDialog, params);            isShowing = true;            /**             * On show dialog             */            if (onDialogShow != null) {                onDialogShow.onDialogShow();            }        } else {            Log.e("CustomDialog", "Can not show dialog");            isShowing = false;        }    }    private void setupOnCancel(int idClose) {        View vClose = layoutDialog.findViewById(idClose);        View vContent = layoutDialog.findViewById(idContent);        if (vClose != null) {            vClose.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dismiss();                    isShowing = false;                }            });        } else {            Log.e("CustomDialog", "(Close view) Cannot finViewById with id " + idClose);        }        if (vContent != null) {            vContent.setOnClickListener(null);        }        /**         * Cancel Dialog, when tap out site dialog (usually is shadow)         */        layoutDialog.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (cancelable) {                    cancel();                }            }        });    }    /**     * Cancel Dialog, When user tap in layout of dialog (not component like button, text view...)     */    public void cancel() {        if (windowManager != null & layoutDialog != null && isShowing) {            windowManager.removeView(layoutDialog);            isShowing = false;        } else {            Log.e("CustomDialog", "Dialog cannot cancel, please check and sure it showing");        }        if (onDialogCancel != null) {            onDialogCancel.onDialogCancel();        }    }    /**     * Dismiss Dialog, when user tab on close button     */    public void dismiss() {        if (windowManager != null & layoutDialog != null && isShowing) {            windowManager.removeView(layoutDialog);            isShowing = false;        } else {            Log.e("CustomDialog", "Dialog cannot dismiss, please check and sure it showing");        }        if (onDialogDismiss != null) {            onDialogDismiss.onDialogDismiss();        }    }    /**     * Dismiss Dialog, when user tab on close button     */    public void hidden() {        if (windowManager != null & layoutDialog != null && isShowing) {            windowManager.removeView(layoutDialog);            isShowing = false;        } else {            Log.e("CustomDialog", "Dialog cannot hiÄ‘dden, please check and sure it showing");        }    }    public boolean isShowing() {        return isShowing;    }    public Context getContext() {        return context;    }}